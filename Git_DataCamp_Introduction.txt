Git projects have two parts: the files and directories that you create and edit directly, and the extra information that Git records about the project's history. The combination of these two things is called a repository.

“git status” will tell you which files have been updated since your last session.



git status shows you which files are in this staging area, and which files have changes that haven't yet been put there.

In order to compare the file as it currently is to what you last saved, you can use “git diff filename”

“git diff” without any filenames will show you all the changes in your repository, while “git diff directory” will show you the changes to the files in some directory.

	The command used to produce the output (in this case, diff --git). In it, a and b are placeholders meaning "the first version" and "the second version".
	An index line showing keys into Git's internal database of changes. We will explore these in the next chapter.
	--- a/report.txt and +++ b/report.txt, which indicate that lines being removed are prefixed with -, while lines being added are prefixed with +.
	A line starting with @@ that tells where the changes are being made. Here, the line shows that lines 1-4 are being removed and replaced with new lines.
	A line-by-line listing of the changes with - showing deletions and + showing additions. (We have also configured Git to show deletions in red and additions in green.) Lines that haven't changed are sometimes shown before and after the ones that have in order to give context; when they appear, they don't have either + or - in front of them.

“git add ‘filename’” will add the file to the staging area

“git diff -r HEAD path/to/file”. The -r flag means "compare to a particular revision", HEAD is a shortcut meaning "the most recent commit", and the path to the file is the relative to where you are (for example, the path from the root directory of the repository).

By default, Git launches a text editor to let you write this message. To keep things simple, you can use -m "some message in quotes" on the command line to enter a single-line message like this:
git commit -m "Program appears to have become self-aware."

The commit line displays a unique ID for the commit called a hash; we will explore these further in the next chapter. The other lines tell you who made the change, when, and what log message they wrote for the change.

Every unique version of every file. (Git calls these blobs because they can contain data of any kind.)
tree that tracks the names and locations of a set of files.
A commit that records the author, log message, and other properties of a particular commit.


To view the details of a specific commit, you use the command git show with the first few characters of the commit's hash.

You can use “git log” to see all the recent commits and then “git show” + the first few characters from the hash to display the specific changes for that hash.

“git show HEAD ~1” will show the most recent hash

“git annotate file” shows who made the last change to each line of a file and when. The hashes at the beginning of the lines show the sets of changes.

“git show” with a commit ID shows the changes made in a particular commit. To see the changes between two commits, you can use git diff ID1..ID2, where ID1 and ID2 identify the two commits you're interested in, and the connector .. is a pair of dots.

The command git clean -n will show you a list of files that are in the repository, but whose history Git is not currently tracking. A similar command git clean -f will then delete those files.

Like most complex pieces of software, Git allows you to change its default settings. To see what the settings are, you can use the command git config --list with one of three additional options:

--system: settings for every user on this computer.
--global: settings for every one of your projects.
--local: settings for one specific project.

To change a configuration value for all of your projects on a particular computer, run the command:

git config --global setting.name setting.value

with the setting's name and value in the appropriate places. The keys that identify your name and email address are user.name and user.email respectively.

$ git config --global user.email rep.loop@datacamp.com

git checkout -- filename
will discard the changes that have not yet been staged. (The double dash -- must be there to separate the git checkout command from the names of the file or files you want to recover.)

If you want to undo changes that have been staged, you can use git reset HEAD filename. 

If you want to undo changes that have been staged, you can use git reset HEAD filename. This does not restore the file to the state it was in before you started making changes. Instead, it resets the file to the state you last staged. If you want to go all the way back to where you were before you started making changes, you must git checkout -- filename as well.

git checkout 2242bd report.txt would replace report.txt with whatever was committed on October 16 for example.

Use git checkout to put those files back in their previous state. Use the directory name . to mean "all of the files in or below this directory", and separate it from the command with --.

The easiest way to create a new branch is to run git checkout -b branch-name, which creates the branch and switches you to it.

Branching lets you create parallel universes; merging is how you bring them back together. When you merge one branch (call it the source) into another (call it the destination), Git incorporates the changes made to the source branch into the destination branch. If those changes don't overlap, the result is a new commit in the destination branch that includes everything from the source branch. (The next exercises describes what happens if there are conflicts.)

To merge two branches, you run git merge source destination (without .. between the two branch names).

!!Need to do more work and learning with merge errors!!

If you want to create a repository for a new project, you can simply say git init project-name, where "project-name" is the name you want the new repository's root directory to have.

To clone a repository, use the command git clone URL, where URL identifies the repository you want to clone. This will normally be something like https://github.com/datacamp/project.git, but for this lesson, we will use filesystem URLs of the form file:///existing/project. The number of slashes at the start is important: the first part of the URL is file://, and then there is a third slash to start the absolute path /existing/project.

When you a clone a repository, Git remembers where the original repository was. It does this by storing a remote in the new repository's configuration. A remote is like a browser bookmark with a name and a URL. If you are in a repository, you can list the names of its remotes using git remote.

If you want more information, you can use git remote -v (for "verbose"), which shows the remote's URLs.

When you clone a repository, Git automatically creates a remote called origin that points to the original repository. You can add more remotes using:

git remote add remote-name URL
and remove existing ones using:

git remote rm remote-name

Git keeps track of remote repositories so that you can pull changes from those repositories and push changes to them. Pulling changes is straightforward: the command git pull remote branch gets everything in branch in the remote repository identified by remote and merges it into the current branch of your local repository. For example, if you are in the quarterly-report branch of your local repository, the command:

git pull thunk latest-analysis

The complement of git pull is git push, which pushes the changes you have made locally into a remote repository. The most common way to use it is:

git push remote-name branch-name

